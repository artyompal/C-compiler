

 1. imul op,op,op является MODIFYING!!
 2. mul/div/idiv являются фактически трёхоперандными. Надо добавить ещё один неявный операнд - регистр edx,
    тогда можно будет убрать весь хардкод про них!! (за исключением жёсткой привязки к регистру).
    Но правда нужно будет чинить код, который подразумевает, что результат инструкции всегда только в первом операнде.
    Можно сделать так, чтобы результат мог быть ещё в ТРЕТЬЕМ операнде тоже.
    А также надо будет доделать код, который извлекает регистры из инструкции.
    А также максимальное число регистров на инструкцию станет равно 4.



 Как решать проблему mov eax,eax.

 1. Фактически, в одной инструкции может оказаться три псевдорегистра, претендующих на один регистр.
    Но только один из них реально должен быть в этом регистре - это регистр результата для mul/div/idiv.
    Поэтому этот регистр результата в соответствующей инструкции неприкосновенен, 
    а остальные операнды вообще могут браться хоть из памяти.
    После этой инструкции регистр может переехать в другой регистр или в память.

 2. В случае конфликта операндов, если второй операнд не является живым после этой инструкции, то его можно
    переложить в любой регистр или даже взять ИЗ ПАМЯТИ.

 3. (Повышенной сложности). Если инструкция коммутативная, то в случае конфликта операндов можно любой из них
    оставить в памяти.

 

 Вообще, возможно надо register_reserved сделать специальным стейтов; такой регистр никто не может вытеснять,
 но только в пределах соответствующих инструкций.

 Возможно есть смысл вернуться к старому подходу:
 - результаты функций всегда доступны в виде mov pseudoreg,eax
 - лишние копирования потом удаляются
 но как тогда следить за тем, чтобы eax/edx никто не затёр???


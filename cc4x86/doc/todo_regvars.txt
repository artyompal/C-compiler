

 Алгоритм работы:


 a. Глобальные регистровые переменные на функцию.

 1. проходим по всем переменным, которые могут быть помещены в регистры

 2. сортируем по частоте использования, с учётом вложенности циклов

 3. для каждой переменной:
 		сохраняем старый псевдо-код;
 		пытаемся выделить переменную, получаем новый псевдокод;
 		раскрашиваем псевдокод, сравниваем его метрику с метрикой предыдущей вариации псевдокода.
 		если стало лучше, сохраняем новый псевдокод.


 b. Локальные регистровые переменные.

 1. для функции составляем дерево ветвления.

 1. проходим по всем переменным, которые могут быть помещены в регистры

 2. сортируем по частоте использования, с учётом вложенности циклов

 3. для каждой переменной:
 		для каждого базового блока:
 			пытаемся закешировать переменную в данном блоке;
 			если метрика стала больше, прекращаем;
 			если метрика стала меньше или равна, пробуем закешировать в родительском блоке


 с. Кеширование:

 1. для функции составляем дерево ветвления.

 2. составляем список всех адресов, которые могут быть закешированы

 3. доказываем корректность кеширования в соответствии с правилами алайсинга
 	или отсутствием каких бы то ни было записей в память на данном интервале;
 	для каждого адреса будет сформирован какой-то набор поддеревьев.

 4. сортируем по частоте использования, с учётом вложенности циклов

 5. для каждого адреса:
  		для каждого из базовых блоков:
  			пытаемся закешировать адрес в данном блоке;
  			вычисляем метрику;
  			если закешировано успешно, пробуем закешировать в родительском блоке

